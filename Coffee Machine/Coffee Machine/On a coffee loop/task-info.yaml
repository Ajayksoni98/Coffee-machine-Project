type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: "# print(\"Starting to make a coffee\")\n# print(\"Grinding coffee beans\"\
    )\n# print(\"Boiling water\")\n# print(\"Mixing boiled water with crushed coffee\
    \ beans\")\n# print(\"Pouring coffee into the cup\")\n# print(\"Pouring some milk\
    \ into the cup\")\n# print(\"Coffee is ready!\")\n\n\n         \n  # print(\"\
    For \"+ num +\" cups of coffee you will need:\")\n\n# water = int(num) * 200\n\
    # milk = int(num) * 50\n# coffee = int(num) * 15\n\n# print(str(water)+\" ml of\
    \ water\")\n# print(str(milk)+\" ml of milk\")\n# print(str(coffee)+ \" g of coffee\
    \ beans\")\n# rem_water = water_cap - water\n# rem_milk = milk_cap - milk\n# rem_coffee\
    \ = coffee_cap - coffee\n\n# print(\"how many ml of water the coffee machine has:\"\
    )\nwater_cap = 400\n\n# print(\"how many ml of milk the coffee machine has:\"\
    )\nmilk_cap = 540\n\n# print(\"how many grams of water the coffee machine has:\"\
    )\ncoffee_cap = 120\n\ndisposable_cups = 9\nmoney_have = 550\n\n# p = water_cap\
    \ // 200\n# q = milk_cap // 50\n# r = coffee_cap // 15\n\n# cup_pos = min(p,q,r)\n\
    # Write your code here\n\nprint(\"coffee machine has:\")\nprint(str(water_cap)\
    \ + \" of water\")\nprint(str(milk_cap) + \" of milk\")\nprint(str(coffee_cap)\
    \ + \" of coffee beans\")\nprint(str(disposable_cups) + \" of disposable cups\"\
    )\nprint(str(money_have) + \" of money\")\n\ndef buy_action():\n    coffee_type\
    \ =  input(\"What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\"\
    )\n    global water_cap\n    global coffee_cap\n    global money_have\n    global\
    \ milk_cap\n    global disposable_cups\n    disposable_cups = disposable_cups\
    \ - 1\n    if coffee_type == \"1\":\n      water_cap = water_cap - 250\n     \
    \ coffee_cap = coffee_cap - 16\n      money_have = money_have + 4\n    elif coffee_type\
    \ == \"2\":\n        water_cap = water_cap - 350\n        milk_cap = milk_cap\
    \ - 75\n        coffee_cap = coffee_cap - 20\n        money_have = money_have\
    \ + 7\n    else:\n        water_cap = water_cap - 200\n        milk_cap = milk_cap\
    \ - 100\n        coffee_cap = coffee_cap - 12\n        money_have = money_have\
    \ + 6\n        \ndef take_action():\n    global money_have\n    print(\"I gave\
    \ you \" + str(money_have) +\"$\")\n    money_have = 0\n    \ndef fill_action():\n\
    \    global water_cap\n    global coffee_cap\n    global money_have\n    global\
    \ milk_cap\n    global disposable_cups\n    added_water = int(input(\"how many\
    \ ml of water do you want to add:\"))\n    added_milk = int(input(\"how many ml\
    \ of milk do you want to add:\"))\n    added_coffee = int(input(\"how many grams\
    \ of coffee beans do you want to add:\")) \n    added_disposable = int(input(\"\
    how many disposable cups of coffee do you want to add:\")) \n    water_cap = water_cap\
    \ + added_water\n    milk_cap = milk_cap + added_milk\n    coffee_cap = coffee_cap\
    \ + added_coffee\n    disposable_cups = disposable_cups + added_disposable  \n\
    \n\n\n\n\n\ninput_  = input(\"Write action (buy, fill, take):\")\nprint(input_)\n\
    if input_ == \"buy\":\n    buy_action()\nelif input_ == \"fill\":\n    fill_action()\n\
    else:\n    take_action()\n\nprint(\"coffee machine has:\")\nprint(str(water_cap)\
    \ + \" of water\")\nprint(str(milk_cap) + \" of milk\")\nprint(str(coffee_cap)\
    \ + \" of coffee beans\")\nprint(str(disposable_cups) + \" of disposable cups\"\
    )\nprint(str(money_have) + \" of money\")\n\n\n# num = input(\"Write how many\
    \ cups of coffee you will need:\")\n\n    \n# if int(num) == cup_pos:\n#    print(\"\
    Yes, I can make that amount of coffee\")\n# elif int(num) < cup_pos:\n#    print(\"\
    Yes, I can make that amount of coffee\" \"(\" \"and even \" +str(cup_pos - int(num))\
    \ + \"more than that\" \")\")\n# else:\n#    print(\"No, I can make only\" + str(cup_pos)\
    \ +  \"cups of coffee\")\n    \n         \n\n         \n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 4
